
==================== FINAL INTERFACE ====================
2017-07-08 09:25:47.75474732 UTC

interface main@main:Main 8002
  interface hash: 2090eeb8645492367465a8fb115467ad
  ABI hash: 6d0a1a92976cb2769dbd84c6af851605
  export-list hash: b2f22c1115f5d3098991241951a6cda6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e507a9f9d40075c271bab6c938ff1baf
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.show'
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      ilososi-0.1.0.0@ilososi-0.1.0.0-H8pDWkvh9nDHjF63Dt2jwj
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  ilososi-0.1.0.0@ilososi-0.1.0.0-H8pDWkvh9nDHjF63Dt2jwj:Lib 1b4b0b6ecc11986a7b80afd8d68c3266
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
d141ad8df741f23cc1ee8d3ed55ac200
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
54e9427dd185d1cfc5445398862f0b1a
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case Text.Read.readEither6
                           @ [[GHC.Types.Float]]
                           (Text.ParserCombinators.ReadP.run
                              @ [[GHC.Types.Float]]
                              Main.main2
                              ipv1) of wild {
                      []
                      -> case GHC.Err.error
                                @ 'GHC.Types.PtrRepLifted
                                @ [[GHC.Types.Float]]
                                GHC.Err.errorWithoutStackTrace_wild1
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                Text.Read.readEither4
                         ret_ty GHC.Base.String
                         of {}
                      : x ds
                      -> case ds of wild1 {
                           []
                           -> Main.main_go
                                (GHC.Base.map @ [GHC.Types.Float] @ Lib.Ilo Lib.ilos x)
                           : ipv2 ipv3
                           -> case GHC.Err.error
                                     @ 'GHC.Types.PtrRepLifted
                                     @ [[GHC.Types.Float]]
                                     GHC.Err.errorWithoutStackTrace_wild1
                                       `cast`
                                     (Sym (GHC.Classes.N:IP[0]
                                               <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                     Text.Read.readEither2
                              ret_ty GHC.Base.String
                              of {} } })
                   GHC.Types.False
                   ipv }) -}
07dd7588f97080f97521a797b64ae302
  main2 :: Text.ParserCombinators.ReadP.P [[GHC.Types.Float]]
  {- Unfolding: (GHC.Read.list1
                   @ [GHC.Types.Float]
                   GHC.Read.$fReadFloat1
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <[GHC.Types.Float]>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <[GHC.Types.Float]>_R)))
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ [[GHC.Types.Float]]
                   (Text.Read.readEither5 @ [[GHC.Types.Float]])) -}
0b742014d8cf998cedd7c8d667b5b415
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
3b5cc289b667ed9cdab43424dbfe67c5
  main_go :: [Lib.Ilo] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
91e0c7e2685bd9a438a6d3cca483165c
  show' :: GHC.Show.Show a => [a] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,U(A,C(U),A)><S,1*U>,
     Unfolding: (\ @ a ($dShow :: GHC.Show.Show a) (x :: [a]) ->
                 letrec {
                   go :: [a] -> [GHC.Types.Char] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ GHC.Types.Char
                       : y ys
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            (GHC.CString.unpackAppendCString#
                               "- "#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  (GHC.Show.show @ a $dShow y)
                                  Main.show'1))
                            (go ys) }
                 } in
                 go x) -}
cec1f491a2970db9c2cece49b665c86c
  show'1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

